https://asmtutor.com/#lesson1
https://cs.lmu.edu/~ray/notes/nasmtutorial/
https://www.informatik.htw-dresden.de/~beck/ASM/syscall_list.html
https://blog.rchapman.org/posts/Linux_System_Call_Table_for_x86_64/
https://en.wikibooks.org/wiki/X86_Disassembly/Branches

    The 64 bit wide registers are: 
;R0  R1  R2  R3  R4  R5  R6  R7  R8  R9  R10  R11  R12  R13  R14  R15
;RAX RCX RDX RBX RSP RBP RSI RDI

    The lowest 32-bits of each register are accessed using:
;R0D R1D R2D R3D R4D R5D R6D R7D R8D R9D R10D R11D R12D R13D R14D R15D
;EAX ECX EDX EBX ESP EBP ESI EDI

    The lowest 16-bits of each register are accessed using:
;R0W R1W R2W R3W R4W R5W R6W R7W R8W R9W R10W R11W R12W R13W R14W R15W
;AX  CX  DX  BX  SP  BP  SI  DI

    The lowest 8-bits of each register are accessed using:
;R0B R1B R2B R3B R4B R5B R6B R7B R8B R9B R10B R11B R12B R13B R14B R15B
;AL  CL  DL  BL  SPL BPL SIL DIL

For x86 64, 
%rax    %rdi    %rsi    %rdx    %r10    %r8     %r9
use syscall for system interrupt
For x86
%eax    %ebx    %ecx    %edx    %esx    %edu
use int 80h for system interrupt

Section .data - constant data
Section .text - code


byte[rax] - rax points to a byte sized variable
