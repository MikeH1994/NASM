For a 32 bit floating point 
bit  31 30    23 22                    0
     S  EEEEEEEE MMMMMMMMMMMMMMMMMMMMMMM
For a 64 bit floating point
     63 62       52 51                                            0
     S  EEEEEEEEEEE MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM

In excess 127 notation, an 8-bit string whose unsigned integer value is M represents M – 127
Ex:00000000 represents -127.
11111111 represents 128

==========================================================================

Examples:
     0 =                        0 = 0 00000000 00000000000000000000000

    -0 =                       -0 = 1 00000000 00000000000000000000000

 0.125 =                    0.125 = 0 01111100 00000000000000000000000
                                     =124;M=-3
  0.25 =                     0.25 = 0 01111101 00000000000000000000000
                                     =125;M=-2
   0.5 =                      0.5 = 0 01111110 00000000000000000000000
                                     =126;M=-1
     1 =                        1 = 0 01111111 00000000000000000000000
                                     =127;M=0
     2 =                        2 = 0 10000000 00000000000000000000000
                                     =128;M=1
     4 =                        4 = 0 10000001 00000000000000000000000
                                     =129;M=2
     8 =                        8 = 0 10000010 00000000000000000000000
                                     =130;M=5  
 0.375 =                    0.375 = 0 01111101 10000000000000000000000
                                     =125;M=-2
  0.75 =                     0.75 = 0 01111110 10000000000000000000000
                                     =126;M=-1
   1.5 =                      1.5 = 0 01111111 10000000000000000000000

     3 =                        3 = 0 10000000 10000000000000000000000

     6 =                        6 = 0 10000001 10000000000000000000000

============================================================================================
Converting binary to decimal

    Sign - find the sign of the mantissa (make a note of this)
    Slide - find the value of the exponent and whether it is positive or negative
    Bounce - move the decimal the distance the exponent asks, left for a negative exponent, right for a positive
        If Moving Left and Is Positive Number, Then pad with zeroes
        If Moving Left and Is Negative Number, Then pad with ones
    Flip - If the mantissa is negative perform twos complement on it
    Swim - starting at the decimal point work out the values of the mantissa, going left, then right. Now make sure you refer back to the sign you recorded on the sign move.

Example: binary floating point worked example

Lets try it out. We are given the following 16 bit floating point number, with 10 bits for the mantissa, and 6 bits for the exponent. Remember the decimal point is between the first and second most significant bits
      
        0100  0000 0000  0001
        0.100 0000 00  ∣  00 0001
The first action we need to perform is the sign, find out the sign of the mantissa 
        *0*.100
It is 0 so the mantissa is positive
The second step in the Noorgat dance is the slide, we need to find the value of the exponent, that is the last 6 bits of the number 
        0.100 0000 00  | *00 0001* = 1
So we know that the exponent is of size positive one and we will have to move the decimal point 
one place to the right.

The third step in the Noorgat dance is the bounce that is moving the decimal point of the Mantissa the number of positions specified by the slide, which was one position to the right. Like so: 
        0.100 0000 00 | 00 0001
        01.00 0000 00 | 00 0001

The fourth step is the optional flip. Check back to the sign stage and see if the Mantissa is negative. It isn't? Oh well you can skip past this stage then as we only flip the number if the mantissa is negative.

The fifth and final step is the swim. Taking the mantissa on its own we can now work out the value of the floating point number. Start at the centre and label each number to the left 1 , 2 , 4 , 8 , 16  and so on. The each number on the right 1/2 , 1/4 , 1/8 , 1/16 and so on. 

        4 2 1 . 1/2 1/4 1/8
        0 0 1 .  0   0   0 
The answer is 1


=====================================================================================================
Work out the denary for the following, using 10 bits for the mantissa and 6 bits for the exponent:

0.001101000 000110

Answer:

1. Sign: the mantissa starts with a zero, therefore it is a positive number.
2. Slide: work out the value of the exponent

000110 = +6

3. Bounce: we need to move the decimal point in the mantissa. In this case the exponent was positive so we need to move the decimal point 6 places to the right

0.001101000 -> 0001101.000

4. Flip: as the number isn't negative we don't need to do this
5. Swim: work out the value on the left hand side and right hand side of the decimal point

1+4+8 = +13 FINISHED!

0 101000000 111111

=====================================================================================================

Work out the binary floating point for the following, using 10 bits for the mantissa and 6 bits for the exponent:

67

Answer:

128 64 32 16  8  4  2  1 . ½  ¼  ⅛
  0  1  0  0  0  0  1  1 . 0  0  0 

How far do we need to move the binary point to the left so that the number is normlised?

  0 . 1  0  0  0  0  1  1  0  0  0  (7 places to the left)

To get the front to be normalised we must move the decimal point 7 places. (moving it 6 places would have made the number negative!)

0.100001100 | 000111

23.25

=======================================================================================================

Converting Denary to Binary equivalent:
    work out the binary equivalent
    work out how far to move the binary point (y)
    set the exponent to be reverse of the number of places you moved the binary point (-y)
    pad the number with extra bits

Example: denary to binary floating point
If we are asked to convert the denary number 39.75 into binary floating point we first need to find out the binary equivalent:
128 64 32 16  8  4  2  1 . ½  ¼  ⅛
  0  0  1  0  0  1  1  1 . 1  1  0 
How far do we need to move the binary point to the left so that the number is normlised?
  0  0 . 1  0  0  1  1  1  1  1  0  (6 places to the left)
So to get our decimal point back to where it started, we need to move 6 places to the right. 6 now becomes your exponent.
0.100111110 | 000110
If you want to check your answer, convert the number above into decimal. You get 39.75!

val = m*b^e 
